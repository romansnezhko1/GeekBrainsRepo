import UIKit

var str = "Hello, playground"

//1. Написать функцию, которая определяет, четное число или нет
var Array = [38, 66, 98, 31, 48, 17, 22]
for evenNumber in Array{
    if evenNumber % 2 == 0 {
        print("\(evenNumber) четное число")
    } else {
        print("\(evenNumber) нечетное число")
    }
}

//2. Написать функцию, которая определит делится ли число без остатка на 3

for dividingBy3 in Array{
    if dividingBy3 % 3 == 0 {
        print("\(dividingBy3) делится на 3 без остатка")
    } else {
        print("\(dividingBy3) делится на 3 с остатком")
    }
}

//3. Создать возврастающий массив из 100 чисел.

var before100: Array <Int>  = []
for i in 1...100 {
    before100.append(i)
}
print(before100)

//4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3.

var numberDelete = before100.filter {$0 % 2 != 0 && $0 % 3 == 0}
   print(numberDelete)


//5. Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 50 элементов Числа Фибоначчи определяются соотношениями Fn=Fn-1 + Fn-2.

func fibonArray(_ n: Int) -> [Double] {
    var fibonacci: [Double] = [1, 1]
    (2...n).forEach { i in
        fibonacci.append(fibonacci[i - 1] + fibonacci[i - 2])
    }
    return fibonacci
}
print(fibonArray(50))

/*6. Заполнить массив из 100 элементов различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу.Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена, нужно выполнить следующие шаги:
a. Выписать подряд все целые числа от двух до n (2, 3, 4, ..., n).
b. Пусть переменная p изначально равна двум — первому простому числу.
c. Зачеркнуть в списке числа от 2 + p до n, считая шагом p..
d. Найти первое не зачёркнутое число в списке, большее, чем p, и присвоить значению переменной p это число.
e. Повторять шаги c и d, пока возможно.*/

func primeNumbers(arrayPassed: [Int]) -> [Int] {
    var primes: [Int] = []
    var newArr = arrayPassed
    while let newP = newArr.first {
        primes.append(newP)
        newArr = newArr.filter { $0 % newP != 0 }
    }
    return primes
}
print(primeNumbers(arrayPassed: Array(2...100)))
